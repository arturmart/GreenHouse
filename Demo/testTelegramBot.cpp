#include <iostream>
#include <thread>

//g++ -o testTelegramBot testTelegramBot.cpp TelegramBot.cpp -lTgBot -lcurl -lboost_system -lssl -lcrypto -lpthread


/*
#include "TelegramBot.h"
#include <thread>
// g++ -o testTelegramBot testTelegramBot.cpp TelegramBot.cpp -lTgBot -lssl -lcrypto -lpthread
void getterCommandTGBot(const std::string& arg){std::cout<<"[TG][getter]"<<arg<<std::endl;}
void executorCommandTGBot(const std::string& arg){std::cout<<"[TG][exe]"<<arg<<std::endl;}
void masterCommandsMapBot(const std::string& arg){std::cout<<"[TG][master]"<<arg<<std::endl;}
TelegramBot bot("7943156657:AAEtMkcU_96y-8BatCoaOhIbOtfZ58R021Q",getterCommandTGBot,executorCommandTGBot,masterCommandsMapBot);

int main(){
    std::thread botThread(&TelegramBot::run, &bot);
    std::this_thread::sleep_for(std::chrono::milliseconds(1000));
    while(true){
        std::this_thread::sleep_for(std::chrono::milliseconds(1000));
        std::cout<<"[main]loop"<<std::endl;
    }
    return 0;
}
*/



#include <tgbot/tgbot.h>
#include <iostream>

std::chrono::steady_clock::time_point lastUpdate = std::chrono::steady_clock::now();
const int MAX_INCTIVITY = 20;


bool isInet(){
    system("ping -c 1 api.telegram.org > /dev/null 2>&1");
    return WEXITSTATUS(system("echo $?")) == 0;
}

int main() {
    std::string token = "7943156657:AAEtMkcU_96y-8BatCoaOhIbOtfZ58R021Q";  // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram API —Ç–æ–∫–µ–Ω
    TgBot::Bot bot(token);

    bot.getEvents().onCommand("start", [&bot](TgBot::Message::Ptr message) {
        bot.getApi().sendMessage(message->chat->id, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π Telegram-–±–æ—Ç. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å.");
    });

    bot.getEvents().onAnyMessage([&bot](TgBot::Message::Ptr message) {
        if (message->text.empty()) return;
        bot.getApi().sendMessage(message->chat->id, "–¢—ã —Å–∫–∞–∑–∞–ª: " + message->text);
    });

    try {
        std::cout << "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω..." << std::endl;
        TgBot::TgLongPoll longPoll(bot);
        while (true) {
            if(!isInet()){
                std::cerr<<"no inet"<<std::endl;
                std::this_thread::sleep_for(std::chrono::seconds(5));
            }

            try{
                
                //TgBot::TgLongPoll longPoll(bot);
                longPoll.start();
            } catch (std::exception &e){
                std::cerr<<"Long pool err"<<e.what()<< std::endl;
                std::cerr<<"delay 5 sec"<<std::endl;
                std::this_thread::sleep_for(std::chrono::seconds(5));
            }
        }
    } catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞: " << e.what() << std::endl;
    }

    return 0;
}


/*
#include <tgbot/tgbot.h>
#include <iostream>
#include <thread>
#include <atomic>
#include <chrono>
#include <csignal>

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
std::atomic<bool> stopBot(false);
std::chrono::steady_clock::time_point lastUpdate = std::chrono::steady_clock::now();
const int MAX_INACTIVITY = 30; // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API
bool isInet() {
    return system("ping -c 1 api.telegram.org > /dev/null 2>&1") == 0;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ long polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
void runLongPoll(TgBot::Bot& bot) {
    while (!stopBot) {
        try {
            if (!isInet()) {
                std::cerr << "‚ö†Ô∏è –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞! –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥..." << std::endl;
                std::this_thread::sleep_for(std::chrono::seconds(5));
                continue;
            }

            std::cerr << "üü¢ –ó–∞–ø—É—Å–∫–∞–µ–º longPoll..." << std::endl;
            TgBot::TgLongPoll longPoll(bot, 30);
            longPoll.start();  // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –∑–∞–≤–∏—Å–Ω—É—Ç—å
            lastUpdate = std::chrono::steady_clock::now();
        } catch (const std::exception& e) {
            std::cerr << "‚ùå –û—à–∏–±–∫–∞ longPoll: " << e.what() << std::endl;
        }

        std::cerr << "‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ longPoll —á–µ—Ä–µ–∑ 5 —Å–µ–∫..." << std::endl;
        std::this_thread::sleep_for(std::chrono::seconds(5));
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–æ—Ç–∞ (Ctrl+C)
void signalHandler(int signum) {
    std::cerr << "üî¥ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª " << signum << ". –ó–∞–≤–µ—Ä—à–∞–µ–º –±–æ—Ç–∞..." << std::endl;
    stopBot = true;
}

int main() {
    std::string token = "7943156657:AAEtMkcU_96y-8BatCoaOhIbOtfZ58R021Q"; // –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
    TgBot::Bot bot(token);

    // –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
    bot.getEvents().onCommand("start", [&bot](TgBot::Message::Ptr message) {
        bot.getApi().sendMessage(message->chat->id, "–ü—Ä–∏–≤–µ—Ç! –Ø Telegram-–±–æ—Ç –Ω–∞ C++.");
    });

    // –≠—Ö–æ-–æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.getEvents().onAnyMessage([&bot](TgBot::Message::Ptr message) {
        if (!message->text.empty()) {
            bot.getApi().sendMessage(message->chat->id, "–¢—ã —Å–∫–∞–∑–∞–ª: " + message->text);
            lastUpdate = std::chrono::steady_clock::now();
        }
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ Ctrl+C
    signal(SIGINT, signalHandler);
    signal(SIGTERM, signalHandler);

    std::cout << "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω..." << std::endl;

    // –ó–∞–ø—É—Å–∫–∞–µ–º longPoll –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    std::thread pollThread(runLongPoll, std::ref(bot));
    pollThread.detach();

    // –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è longPoll
    while (!stopBot) {
        auto now = std::chrono::steady_clock::now();
        int secondsSinceLastUpdate = std::chrono::duration_cast<std::chrono::seconds>(now - lastUpdate).count();

        if (secondsSinceLastUpdate > MAX_INACTIVITY) {
            std::cerr << "‚ö†Ô∏è –ë–æ—Ç –∑–∞–≤–∏—Å! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º longPoll..." << std::endl;
            stopBot = true;
        }

        std::this_thread::sleep_for(std::chrono::seconds(10));
    }

    std::cerr << "üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω." << std::endl;
    return 0;
}

*/
